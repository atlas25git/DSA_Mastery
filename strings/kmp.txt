|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~KMP~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|
|Proper suffix's length smaller than the txt.-'1'                                   |                     
| str = "abacabad"                                                                  |        
| lps[0,0,1,0,1,2,3,0]                                                              |
|                                                                                   |
| str="a b b a b b"                                                                 |
| lps[0,0,0,1,2,3]                                                                  |
|                                                                                   |
| ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CODE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| T.C: O(n3);                                                                       |
| int lps(str,n){                                                                   |
|     for(len=n-1;len>0;len--) //len-1 bcoz (1)                                     |
|     {                                                                             |
|         bool flag = true;                                                         |
|         for(int i=0;i<len;i++)                                                    |
|            if(str[i] != str[n-len-i])                                             |
|                    flag=false;                                                    |
|            if(flag ==true)                                                        |
|                return len; //coz the further iterations will only                 |
|                               give smallervalue.                                  |
|       }                                                                           |
|     return 0;                                                                     |
| }                                                                                 |
| void fill_lps(str,lps[]){                                                         |
|     for(int i=0;i<str.length();i++)                                               |
|        lps[i]=lps(str,i+1);                                                       |
| }                                                                                 |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LPS:Array-CODE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|Basic Ideas:{str - string, len= len of lps, lps[]}                                 | 
|1)if str[i] = str[len], then lps[i] = len+1, len++;                                |
|2)if str[i] != str[len],                                                           |
|        -->a) if len==0, lps[i]=0;                                                 |
|        -->b) else len=lps[len-1];                                                 |
|            --> now again compare str[i] and str[len].                             |
|                                                                                   |
|void flps(str,lps[])                                                               |
|{                                                                                  |                                        
|    int n = str.length(),len=0;                                                    |
|    lps[0] = 0;                                                                    |
|    int i = 1;                                                                     |
|    while(i<n)                                                                     |
|    {                                                                              |
|        if(str[i] == str[len])                                                     |
|        {                                                                          |
|            len++; lps[i]=len; i++;                                                |
|        }                                                                          |
|        else{                                                                      |
|            if(len==0){                                                            |
|                lps[i]=0;i++;                                                      |
|            }                                                                      |
|            else {                                                                 |
|                len = lps[len - 1];                                                |
|            }                                                                      |
|        }                                                                          |
|    }                                                                              |
|}                                                                                  |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~KMP~CODE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|Void KMP(pat,txt)                                                                  |
|{                                                                                  |
|    int n=txt.length();                                                            |
|    int m=pat.length();                                                            |
|    int lps[M];//lps array of pattern.                                             |
|    fill_lps(pat,lps);                                                             |
|    int i=0,j=0;                                                                   |
|    while(i<N)                                                                     |
|    {                                                                              |
|        if(pat[j] == txt[i]){i++,j++;}                                             |
|        if(j==m){print(i-j); j = lps[j-1];}                                        |
|        else if(i<n && pat[j]!=txt[i])                                             |
|        {                                                                          |
|            if(j==0){i++};                                                         |
|            else{j=lps[j-1];}                                                      |
|        }                                                                          |
|    }                                                                              |
|}                                                                                  |
|Here the use of j=lps[j-1],tells us that for those many charachters comparison can |
|skipped as it brings the comparison for the point of symmetry,                     | 
|and if the lps[j-1]==0,it means there are no such symmetries or comarison to be    |
|made.                                                                              |
|In subsequent steps the pattern is fwded to see if there is some value for which   |
|it might be so that the pattern could be found at present i's value.               |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~